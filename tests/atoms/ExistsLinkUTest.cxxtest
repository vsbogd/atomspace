/*
 * tests/atoms/ExistsLinkUTest.cxxtest
 *
 * Copyright (C) 2015 Linas Vepstas
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/atoms/base/Atom.h>
#include <opencog/atomspace/AtomSpace.h>

using namespace opencog;

// Test some constructs involving ExistsLink.
//
class ExistsLinkUTest :  public CxxTest::TestSuite
{
private:
	AtomSpace _as;

public:
	ExistsLinkUTest()
	{
		logger().set_print_to_stdout_flag(true);
		logger().set_timestamp_flag(false);
	}

	void setUp() {}

	void tearDown() {}

	void test_exists();
};

#define AN _as.add_node
#define AL _as.add_link

// Test that the following construct (Or (Exists ...) (Exists ...)) is
// valid.
void ExistsLinkUTest::test_exists()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	// Create ScopeLinks.
	Handle X = AN(VARIABLE_NODE, "$X"),
		P = AN(PREDICATE_NODE, "P"),
		Q = AN(PREDICATE_NODE, "Q"),
		PX = AL(EVALUATION_LINK, P, X),
		QX = AL(EVALUATION_LINK, Q, X),
		EPX = AL(EXISTS_LINK, X, PX),
		EQX = AL(EXISTS_LINK, X, QX);

	TS_ASSERT_THROWS_NOTHING(AL(OR_LINK, EPX, EQX));

	logger().info("END TEST: %s", __FUNCTION__);
}
