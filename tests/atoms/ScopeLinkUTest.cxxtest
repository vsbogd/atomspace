/*
 * tests/atoms/ScopeLinkUTest.cxxtest
 *
 * Copyright (C) 2017 OpenCog Foundation
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/guile/SchemeEval.h>
#include <opencog/atoms/base/Atom.h>
#include <opencog/atoms/base/Node.h>
#include <opencog/atoms/base/Link.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atoms/core/ScopeLink.h>

#include <cxxtest/TestSuite.h>

using namespace opencog;

#define al _as.add_link
#define an _as.add_node

// Test ScopeLink.
//
class ScopeLinkUTest :  public CxxTest::TestSuite
{
private:
	AtomSpace _as;
	SchemeEval _eval;
	Handle X, Y, S, T, P, Q, CT;

public:
	ScopeLinkUTest() : _eval(&_as)
	{
		logger().set_print_to_stdout_flag(true);

		X = an(VARIABLE_NODE, "$X");
		Y = an(VARIABLE_NODE, "$Y");
		S = an(VARIABLE_NODE, "$S");
		T = an(VARIABLE_NODE, "$T");
		P = an(PREDICATE_NODE, "P");
		Q = an(PREDICATE_NODE, "Q");
		CT = an(TYPE_NODE, "ConceptNode");

		_eval.eval("(add-to-load-path \"" PROJECT_SOURCE_DIR "\")");

	}

	void setUp() {}

	void tearDown() {}

	void test_content_less();
	void test_content_less_ev();
	void test_content_less_un();
	void test_content_less_uno();
	void test_content_less_st();
	void test_content_less_cpt();
	void test_get_variables_1();
	void test_get_variables_2();
	void test_get_variables_3();
	void test_compute_hash_1();
	void test_compute_hash_2();
	void test_compute_hash_3();
};

void ScopeLinkUTest::test_content_less()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle scX(createLink(SCOPE_LINK, X, X));
	Handle scY(createLink(SCOPE_LINK, Y, Y));

	// scX and scY alpha-equivalent, they should be equal by content,
	// thus neither scX < scY not scY < scX by content.
	content_based_handle_less lt;
	TS_ASSERT(content_eq(scX, scY));
	TS_ASSERT(not lt(scX, scY));
	TS_ASSERT(not lt(scY, scX));

	logger().info("END TEST: %s", __FUNCTION__);
}

void ScopeLinkUTest::test_content_less_ev()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle scX(createLink(SCOPE_LINK, X,
	                   al(EVALUATION_LINK, P, X)));
	Handle scY(createLink(SCOPE_LINK, Y,
	                   al(EVALUATION_LINK, P, Y)));

	// scX and scY alpha-equivalent, they should be equal by content,
	// thus neither scX < scY not scY < scX by content.
	content_based_handle_less lt;
	TS_ASSERT(content_eq(scX, scY));
	TS_ASSERT(not lt(scX, scY));
	TS_ASSERT(not lt(scY, scX));

	logger().info("END TEST: %s", __FUNCTION__);
}

void ScopeLinkUTest::test_content_less_un()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle scX(createLink(SCOPE_LINK,
	                   al(VARIABLE_LIST, X, Y),
	                   al(AND_LINK,
	                      al(EVALUATION_LINK, P, X),
	                      al(EVALUATION_LINK, Q, Y))));
	Handle scY(createLink(SCOPE_LINK,
	                   al(VARIABLE_LIST, Y, X),
	                   al(AND_LINK,
	                      al(EVALUATION_LINK, P, Y),
	                      al(EVALUATION_LINK, Q, X))));

	// scX and scY alpha-equivalent, they should be equal by content,
	// thus neither scX < scY not scY < scX by content.
	content_based_handle_less lt;
	TS_ASSERT(content_eq(scX, scY));
	TS_ASSERT(not lt(scX, scY));
	TS_ASSERT(not lt(scY, scX));

	logger().info("END TEST: %s", __FUNCTION__);
}

void ScopeLinkUTest::test_content_less_uno()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle scX(createLink(SCOPE_LINK,
	                   al(VARIABLE_LIST, X, Y, S, T),
	                   al(AND_LINK,
	                      al(EVALUATION_LINK, P, X),
	                      al(EVALUATION_LINK, P, Y),
	                      al(EVALUATION_LINK, P, S),
	                      al(EVALUATION_LINK, P, T))));
	Handle scY(createLink(SCOPE_LINK,
	                   al(VARIABLE_LIST, S, T, Y, X),
	                   al(AND_LINK,
	                      al(EVALUATION_LINK, P, X),
	                      al(EVALUATION_LINK, P, Y),
	                      al(EVALUATION_LINK, P, S),
	                      al(EVALUATION_LINK, P, T))));

	// scX and scY alpha-equivalent, they should be equal by content,
	// thus neither scX < scY not scY < scX by content.
	content_based_handle_less lt;
	TS_ASSERT(content_eq(scX, scY));
	TS_ASSERT(not lt(scX, scY));
	TS_ASSERT(not lt(scY, scX));

	logger().info("END TEST: %s", __FUNCTION__);
}

void ScopeLinkUTest::test_content_less_st()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle scX(createLink(SCOPE_LINK,
	                   al(VARIABLE_LIST, X, Y),
	                   al(AND_LINK,
	                      al(EVALUATION_LINK, P, X),
	                      al(EVALUATION_LINK, Q, Y))));
	Handle scY(createLink(SCOPE_LINK,
	                   al(VARIABLE_LIST, S, T),
	                   al(AND_LINK,
	                      al(EVALUATION_LINK, P, S),
	                      al(EVALUATION_LINK, Q, T))));

	// scX and scY alpha-equivalent, they should be equal by content,
	// thus neither scX < scY not scY < scX by content.
	content_based_handle_less lt;
	TS_ASSERT(content_eq(scX, scY));
	TS_ASSERT(not lt(scX, scY));
	TS_ASSERT(not lt(scY, scX));

	logger().info("END TEST: %s", __FUNCTION__);
}

void ScopeLinkUTest::test_content_less_cpt()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle A(an(CONCEPT_NODE, "foo"));
	Handle B(an(CONCEPT_NODE, "bar"));

	Handle scX(createLink(SCOPE_LINK,
	                   al(VARIABLE_LIST, X, Y, S, T),
	                   al(AND_LINK,
	                      al(EVALUATION_LINK, P, X),
	                      al(EVALUATION_LINK, Q, Y),
	                      al(EVALUATION_LINK, P, al(LIST_LINK, A, S)),
	                      al(EVALUATION_LINK, Q, al(LIST_LINK, B, T))
	                   )));
	Handle scY(createLink(SCOPE_LINK,
	                   al(VARIABLE_LIST, T, S, Y, X),
	                   al(AND_LINK,
	                      al(EVALUATION_LINK, P, T),
	                      al(EVALUATION_LINK, Q, S),
	                      al(EVALUATION_LINK, P, al(LIST_LINK, A, Y)),
	                      al(EVALUATION_LINK, Q, al(LIST_LINK, B, X))
	                   )));

	// scX and scY alpha-equivalent, they should be equal by content,
	// thus neither scX < scY not scY < scX by content.
	content_based_handle_less lt;
	TS_ASSERT(content_eq(scX, scY));
	TS_ASSERT(not lt(scX, scY));
	TS_ASSERT(not lt(scY, scX));

	logger().info("END TEST: %s", __FUNCTION__);
}

void ScopeLinkUTest::test_get_variables_1()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle sch = al(SCOPE_LINK,
	                X,
	                al(AND_LINK,
	                   al(EVALUATION_LINK, P, X),
	                   al(EVALUATION_LINK, Q, Y)));

	ScopeLinkPtr sc = ScopeLinkCast(sch);

	auto got = sc->get_variables().varset;
	auto exp = HandleSet{X};

	printf("Got %s\n", oc_to_string(got).c_str());
	printf("Excepted %s\n", oc_to_string(exp).c_str());

	TS_ASSERT_EQUALS(got, exp);

	logger().info("END TEST: %s", __FUNCTION__);
}

void ScopeLinkUTest::test_get_variables_2()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle sch = al(SCOPE_LINK,
	                al(TYPED_VARIABLE_LINK, X, CT),
	                an(VARIABLE_NODE, "$P-55ebe96e"),
	                al(EVALUATION_LINK,
	                   an(PREDICATE_NODE, "take"),
	                   an(CONCEPT_NODE, "compound-A")));

	ScopeLinkPtr sc = ScopeLinkCast(sch);

	auto got = sc->get_variables().varset;
	auto exp = HandleSet{X};

	printf("Got %s\n", oc_to_string(got).c_str());
	printf("Excepted %s\n", oc_to_string(exp).c_str());

	TS_ASSERT_EQUALS(got, exp);

	logger().info("END TEST: %s", __FUNCTION__);
}

void ScopeLinkUTest::test_get_variables_3()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	Handle sch = al(IMPLICATION_SCOPE_LINK,
	                al(TYPED_VARIABLE_LINK, X, CT),
	                an(VARIABLE_NODE, "$P-55ebe96e"),
	                al(EVALUATION_LINK,
	                   an(PREDICATE_NODE, "take"),
	                   an(CONCEPT_NODE, "compound-A")));

	ScopeLinkPtr sc = ScopeLinkCast(sch);

	auto got = sc->get_variables().varset;
	auto exp = HandleSet{X};

	printf("Got %s\n", oc_to_string(got).c_str());
	printf("Excepted %s\n", oc_to_string(exp).c_str());

	TS_ASSERT_EQUALS(got, exp);

	logger().info("END TEST: %s", __FUNCTION__);
}

void ScopeLinkUTest::test_compute_hash_1()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	std::string result =
		_eval.eval("(load-from-path \"tests/atoms/scopelinks.scm\")");

	Handle bl1 = _eval.eval_h("bl-1"),
		bl2 = _eval.eval_h("bl-2");

	TS_ASSERT_DIFFERS(bl1.value(), bl2.value());

	logger().info("END TEST: %s", __FUNCTION__);
}

void ScopeLinkUTest::test_compute_hash_2()
{
	logger().info("BEGIN TEST: %s", __FUNCTION__);

	std::string result =
		_eval.eval("(load-from-path \"tests/atoms/scopelinks.scm\")");

	Handle gl1 = _eval.eval_h("gl-1"),
		gl2 = _eval.eval_h("gl-2");

	TS_ASSERT_DIFFERS(gl1.value(), gl2.value());

	logger().info("END TEST: %s", __FUNCTION__);
}

void ScopeLinkUTest::test_compute_hash_3(){
    logger().info("BEGIN TEST: %s", __FUNCTION__);

    std::string result =
        _eval.eval("(load-from-path \"tests/atoms/scopelinks.scm\")");

    Handle hash1 = _eval.eval_h("hash-test1");
    Handle hash2 = _eval.eval_h("hash-test2");
    TS_ASSERT_DIFFERS(hash1.value(), hash2.value());

    hash1 = _eval.eval_h("hash-test3");
    hash2 = _eval.eval_h("hash-test4");
    TS_ASSERT_DIFFERS(hash1.value(), hash2.value());

    hash1 = _eval.eval_h("hash-test5");
    hash2 = _eval.eval_h("hash-test6");
    TS_ASSERT_DIFFERS(hash1.value(), hash2.value());

    logger().info("END TEST: %s", __FUNCTION__);
}

#undef al
#undef an
